generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Products {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  gender                 Gender         @default(men)
  description            String
  category               Category
  price                  Int
  discountPrice          Int
  imageUrl               String
  imageUrlSecond         String?
  isAvailableForPurchase Boolean
  isBestSeller           Boolean
  isNewProduct           Boolean
  reviews                Int?
  amount                 Int?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  CartItem               CartItem[]
  FavoriteItem           FavoriteItem[]

  @@map("products")
}

enum Gender {
  men
  women
}

enum Category {
  shirt
  sweatshirt
  hoodie
  jogger
}

model Favorite {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  userId       String?        @db.ObjectId
  user         User?          @relation(fields: [userId], references: [id])
  FavoriteItem FavoriteItem[]

  @@map("favorite")
}

model FavoriteItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  product    Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  favoriteId String   @db.ObjectId
  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade)

  @@map("favoriteitem")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @db.ObjectId

  @@map("carts")
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  Favorite      Favorite[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
